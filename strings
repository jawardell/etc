what happens when we want to change a string or point to it



	a string literal??




well, string literals are saved in the constants section 
	of memory 



we need to put the string into an array of chars.. 
so that we can have a pointer to it


what happens when we do that? 
	a copy of the string literal is implictly made
	the copy is placed into the variables part of memory
		moved from the constants read-only memory
		into the read/write variables section of memory
	the copy is implicityly made and the other copy 
		..still remains in the constants section of memory.. 


the compiler does this for you .. 


strings. .. .  don't forget about our c friends '\0' and sizeof()




make char arrays constant to protect the contents of the string

ANNOYING NOTATION ALERT!!
	
	int *test(); -- returns an int*  pointer to an int!!

	so this way is more intuitive: 
		int* test();






its a good practice to declare pointers to NULL 
rather than let them remain wildly declared pointers.. 

	it clears out the garbage that they contain











stdrod takes a string and the ADDRESS of a pointer. 

	it finds the end of the string and assigns that value to a pointer which is 
	being pointed to using the local variable








what is #define    ... is it an assignment statement? 
		... is it a constant? 

what is the difference between const and define??





how does strtod    know what a hex number is?????A???/???/





fgets consumes EVERYTHING!! white space AND new lines 


scanf uses white space and \n as delimeters





you will see three files for a5





	instructions 
	testsin [don't forget to link the math library]
	teststack.c  [this is the solutions to assignment 4] TROLLZ!!!!






