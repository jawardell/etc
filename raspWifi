auto lo
iface lo inet loopback

auto wlan0
iface wlan0 inet dhcp
wireless-mode Managed
wpa-ssid **censored**
wpa-ap-scan 1
wpa-proto RSN WPA
wpa-pairwise CCMP TKIP
wpa-group CCMP TKIP
wpa-key-mgmt WPA-EAP
wpa-eap PEAP
wpa-identity **censored**
wpa-password **censored**
wpa-phase1 fast_provisioning=1
wpa-pac-file /home/kyle/Downloads/chain2.cer


sudo ifconfig wlan0 down
sudo ifconfig wlan0 up
sudo dhclient wlan0 -v

whatis dhclient: Dynamic Host Configuration Protocol Client
"The Internet Systems COnsotium DHCP Client, dhclient, provides a means for configuring one or more network interfaces using the Dynamic Host Configuration Protocol, BOOTP protocol, or if these protocols fail, by statisically assigning an address.


whatis ifconfig: configure a network interface
Ifconfig is used to configure the kernel-resident network interfaces. It is used at boot time to set up interfaces as necessary. After that, it is usually only needed when debugging or when system ruing is needed. 

whatis iwconfig: configure a wireless network interface
"Iwconfig is similar to ifconfig, but is dedicated to the wireless interfaces. It is used to set the parameters of the network interface which are specific to the wireless operation. Iwconfig may also be used to display those parameters and the wireless statistics. 

The essid isthe network name or domain name. ESSID can be used as a parameter with the iwconfig command to set the ESSID of the wireless network that you are trying to connect to. As opposed to the AP Address or NWID which define a single "cell", the ESSID defines a group of cells connected via repeaters or infrastructure, where the user may roam transparently. 

wlan0 is the wifi card, wlan stands for wireless local area connection. local area connections are groups of computers and devices that are connected.

up: this flag causes the interface to be activated. It is implicitly specified if an address is assigned to the interface.
down: this flag causes the driver for this interface to be shutdown




DESCRIPTION
       The Internet Systems Consortium DHCP Client, dhclient, provides a means
       for  configuring  one or more network interfaces using the Dynamic Host
       Configuration Protocol, BOOTP protocol, or if these protocols fail,  by
       statically assigning an address.

OPERATION
       The DHCP protocol allows a host to contact a central server which main‐
       tains a list of IP addresses which may be assigned on one or more  sub‐
       nets.   A  DHCP  client may request an address from this pool, and then
       use it on a temporary basis for communication  on  network.   The  DHCP
       protocol also provides a mechanism whereby a client can learn important
       details about the network to which it is attached, such as the location
       of a default router, the location of a name server, and so on.

       There  are  two  versions  of  the DHCP protocol DHCPv4 and DHCPv6.  At
       startup the client may be started for one or the other via the -4 or -6
       options.

       On startup, dhclient reads the dhclient.conf for configuration instruc‐
       tions.  It then gets a list of all the network interfaces that are con‐
       figured in the current system.  For each interface, it attempts to con‐
       figure the interface using the DHCP protocol.

       In order to keep track of  leases  across  system  reboots  and  server
       restarts,  dhclient  keeps a list of leases it has been assigned in the
       dhclient.leases file.  On  startup,  after  reading  the  dhclient.conf
       file,  dhclient  reads  the  dhclient.leases file to refresh its memory
       about what leases it has been assigned.

       When a new lease is  acquired,  it  is  appended  to  the  end  of  the
       dhclient.leases file.  In order to prevent the file from becoming arbi‐
       trarily large, from time to time dhclient creates a new dhclient.leases
       file  from  its  in-core  lease  database.   The  old  version  of  the
       dhclient.leases file is retained under the name dhclient.leases~  until
       the next time dhclient rewrites the database.

       Old  leases are kept around in case the DHCP server is unavailable when
       dhclient is first invoked (generally during  the  initial  system  boot
       process).   In  that  event,  old  leases from the dhclient.leases file
       which have not yet expired are tested, and if they are determined to be
       valid,  they  are  used  until  either  they  expire or the DHCP server
       becomes available.

       A mobile host which may sometimes need to access a network on which  no
       DHCP server exists may be preloaded with a lease for a fixed address on
       that network.  When all attempts to contact a DHCP server have  failed,
       dhclient  will  try  to  validate the static lease, and if it succeeds,
       will use that lease until it is restarted.

       A mobile host may also travel to some networks on  which  DHCP  is  not
       available  but  BOOTP  is.   In  that  case,  it may be advantageous to
       arrange with the network administrator for an entry on the BOOTP  data‐
       base,  so  that  the  host can boot quickly on that network rather than
       cycling through the list of old leases.

COMMAND LINE
       The names of the network interfaces that  dhclient  should  attempt  to
       configure  may be specified on the command line.  If no interface names
       are specified on the command line dhclient will normally  identify  all
       network  interfaces,  eliminating non-broadcast interfaces if possible,
       and attempt to configure each interface.

       It is also possible to specify interfaces by name in the  dhclient.conf
       file.   If  interfaces  are specified in this way, then the client will
       only configure interfaces that are either specified in  the  configura‐
       tion file or on the command line, and will ignore all other interfaces.

       The  client  normally prints no output during its startup sequence.  It
       can be made to emit verbose messages displaying  the  startup  sequence
       events  until  it  has  acquired an address by supplying the -v command
       line argument.  In either case, the client logs messages using the sys‐
       log(3) facility.




The following configuration entry in the "/etc/network/interfaces" file brings up the loopback network interface lo upon booting the system (via auto stanza).

auto lo
iface lo inet loopback
This one always exists in the "/etc/network/interfaces" file.
lo is a loopback device. You can imagine it as a virtual network device that is on all systems, even if they aren't connected to any network. It has an IP address of 127.0.0.1 and can be used to access network services locally.

The loopback networking interface is a virtual network device implemented entirely in software. All traffic sent to it "loops back" and just targets services on your local machine


NAME
       /etc/network/interfaces  - network interface configuration for ifup and
       ifdown

DESCRIPTION
       /etc/network/interfaces contains network interface configuration infor‐
       mation  for the ifup(8) and ifdown(8) commands.  This is where you con‐
       figure how your system is connected to the network.

       Lines starting with `#' are ignored. Note that end-of-line comments are
       NOT supported, comments must be on a line of their own.

       A line may be extended across multiple lines by making the last charac‐
       ter a backslash.

       The file consists of zero or more "iface", "mapping", "auto", "allow-",
       "source" and "source-directory" stanzas. Here is an example:

       auto eth0
       allow-hotplug eth1

       source interfaces.d/machine-dependent

       source-directory interfaces.d

       iface eth0 inet dhcp

       iface eth0 inet6 auto

       mapping eth1
            script /usr/local/sbin/map-scheme
            map HOME eth0-home
            map WORK eth0-work

       iface eth1-home inet static
            address 192.168.1.2/24
            gateway 192.168.1.1
            up flush-mail

       iface eth1-work inet dhcp

       Lines  beginning with the word "auto" are used to identify the physical
       interfaces to be brought up when ifup is run with the -a option.  (This
       option  is  used by the system boot scripts.)  Physical interface names
       should follow the word "auto" on the same line.  There can be  multiple
       "auto"  stanzas.   ifup  brings  the  named  interfaces up in the order
       listed.

       Lines beginning with "allow-" are  used  to  identify  interfaces  that
       should  be  brought  up automatically by various subsytems. This may be
       done using a command such as "ifup --allow=hotplug  eth0  eth1",  which
       will  only  bring up eth0 or eth1 if it is listed in an "allow-hotplug"
       line. Note that "allow-auto" and "auto" are synonyms.

Lines beginning with "no-auto-down" are  used  to  identify  interfaces
       that  should  not  be brought down by the command "ifdown -a". Its main
       use is to prevent an interface from being brought  down  during  system
       shutdown time, for example if the root filesystem is a network filesys‐
       tem and the interface should stay up until the very end. Note that  you
       can  still  bring  down  the interface by specifying the interface name
       explicitly.

       Lines beginning with "no-scripts" are used to identify  interfaces  for
       which  scripts  in  /etc/network/if-*.d/  should  not be run when those
       interfaces are brought up or down.

       Lines beginning with "source" are used to include  stanzas  from  other
       files, so configuration can be split into many files. The word "source"
       is followed by the path of file to be sourced. Shell wildcards  can  be
       used.  (See wordexp(3) for details.)

       Similarly,  "source-directory" keyword is used to source multiple files
       at once, without specifying them individually  or  using  shell  globs.
       Additionally,  when  "source-directory" is used, names of the files are
       checked to match the following regular expression: ^[a-zA-Z0-9_-]+$. In
       other words, the names must consist entirely of ASCII upper- and lower-
       case letters, ASCII digits, ASCII underscores, and ASCII minus-hyphens.
       In the directory path, shell wildcards may be used as well.

       When  sourcing  files  or directories, if a path doesn't have a leading
       slash, it's considered relative to the directory containing the file in
       which  the  keyword  is  placed.  In  the example above, if the file is
       located at /etc/network/interfaces, paths to  the  included  files  are
       understood to be under /etc/network.

       Currently,  "source-directory"  isn't  supported by network-manager and
       guessnet.

       By default, on a freshly installed Debian system, the  interfaces  file
       includes a line to source files in the /etc/network/interfaces.d direc‐
       tory.

       Stanzas beginning with the word "mapping" are used to determine  how  a
       logical interface name is chosen for a physical interface that is to be
       brought up.  The first line of a mapping stanza consists  of  the  word
       "mapping"  followed  by  a  pattern in shell glob syntax.  Each mapping
       stanza must contain a script definition.  The named script is run  with
       the  physical  interface  name as its argument and with the contents of
       all following "map" lines (without the leading  "map")  in  the  stanza
       provided to it on its standard input. The script must print a string on
       its standard output before exiting.  See  /usr/share/doc/ifupdown/exam‐
       ples for examples of what the script must print.

       Mapping a name consists of searching the remaining mapping patterns and
       running the script corresponding to the first match; the script outputs
       the name to which the original is mapped.
 ifup  is  normally  given  a  physical  interface  name  as  its  first
       non-option argument.  ifup also uses this name as the  initial  logical
       name  for  the  interface  unless it is accompanied by a  suffix of the
       form =LOGICAL, in which case ifup chooses LOGICAL as the initial  logi‐
       cal name for the interface.  It then maps this name, possibly more than
       once according to successive mapping specifications,  until no  further
       mappings  are  possible.   If  the  resulting  name is the name of some
       defined logical interface then ifup attempts to bring up  the  physical
       interface  as  that  logical  interface.   Otherwise ifup exits with an
       error.

       Stanzas defining logical interfaces start with a line consisting of the
       word  "iface" followed by the name of the logical interface.  In simple
       configurations without mapping stanzas this name should simply  be  the
       name  of  the  physical  interface  to which it is to be applied.  (The
       default mapping script is, in effect, the echo command.)  The interface
       name  is  followed by the name of the address family that the interface
       uses.  This will be "inet" for TCP/IP networking,  but  there  is  also
       some support for IPX networking ("ipx"), and IPv6 networking ("inet6").
       Following that is the name of the method used to configure  the  inter‐
       face.

       Additional  options  can  be  given  on subsequent lines in the stanza.
       Which options are available  depends  on  the  family  and  method,  as
       described  below.   Additional  options  can be made available by other
       Debian packages.  For example, the wireless-tools package makes  avail‐
       able a number of options prefixed with "wireless-" which can be used to
       configure  the  interface  using  iwconfig(8).   (See  wireless(7)  for
       details.)

       Options  are usually indented for clarity (as in the example above) but
       are not required to be.

       Multiple "iface" stanzas can be given for the same interface, in  which
       case  all  of  the  configured addresses and options for that interface
       will be applied when bringing up that interface.   This  is  useful  to
       configure  both IPv4 and IPv6 addresses on the same interface (although
       if no inet6 stanza is present, the kernel will normally  still  perform
       stateless  address  autoconfiguration  if there is an IPv6 route adver‐
       tisement daemon on the network). It can also be used to configure  mul‐
       tiple addresses of the same type on a single interface.





