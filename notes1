Read in input from console 
Keep pushing onto stack while there is still input 
We should have an operator on the top of the stack 
We know that there are operands which follow the operator
There will be two operands following the operator 
Start parsing 
What is the operator
	If “+’ do addition with two previous operands on stack
	If “*” do multiplication with two previous operands on stack
	If “-” do subtraction with two previous operands on the stack
	If ”/’ do division with two previous operands on the stack
	If “sin” do sin of previous operand on the stack
	If “log” do log base 10 of previous operand on stack (is it log base ten or 2 or natural lg?)
Why pointers? 
	Well, we need a pointer with depth two
		We will be pointing to the index of the top of the stack using the address of a pointer at depth one which we update every time we push and pop
		We will be using that address to access the items which are contained in the stack
Get top operator 
Pop until last operand is reached 
	I think we pop until 




The program thinks that the input is a string, 



But it’s really not. 
We need to read the input in as a string 
and keep pushing on to the stack of input as a string



doesn't go into the 


fgets 

deals with a string with spaces inside 



with fgets doesn't go into the stack until enter is pressed 

goes into the stack and then it is parsed



we parse the stack using stringtok 


gets a string and depending on the delemiter, 
	gives you the tokens 



we will have a stack of charactesr which is a string
we will then parse the string using string tok 

parse and decide what they are

anytime we see a number 
anytime see operator
	pop a number of items 
	conitnue to do that until we are done


see number push it in



see operator: pop out two operands!! 
	perform the operation 
	push the result back in



numbers get pushed in 
then all of the sudden you see an operator 


	you know whic hones need two operands 
	so when you see that operator, 
		pop out two operaands 
		perform the operationa
		and push the result back into the stack



this will preserve operator presecence 
	because the final result will be 




grabbing the sting
parsing it 
and pushing the results back in 


how do you know if everything is fine

you check to see if there is only one number lerft on the stack 


then you pop the number out


this is the final result 




if there is more than one number left on the stack, 
	then you know you did something wrong



so we want to see if we can oimporvellsldflds







		if we see a bad operator, we need to handle it 
		if we see div by zero we need to handle it 
			segmentation fault happens.. 
		just print an error when we see bad stuff
		log cannot accept negative arguments ... 
			log with not good arguments causers a runtime erryr.. 


			we need to handle that 
			stuff like that ilwl cause our prgam to fail 

		no good we are left with more than o




	the rest of the statement would be trash.. 
		don't try to continue whne see bad operation or othe r
	
		trash the string and ask for new reverse polish expression 















do one thing and do it well. .. . .






	there are llots of methods other than main we have seen 
	but that's not all 
	we can do more 
	there are a bunch of functions and each one is in charge of a things.. 
	
		
	.....'"small is beautiful".....
	

	instead of having everything in one file, let's have each function in each program
		each one is small but it does the job well 




there are different ways that you can change it up 

	organize everything into files 

and modularize the code 




that's way number one 





way nuymber two  .,




we are talking about a big prohram that contains multiple files 


	this iwll make things complicated.. 
i think this is header files and stuff.. 



what if one thing is chaged. ... which thinkgs and files do we compo;es???? 


	welll... this is why we have make!! 




make makes everything.. 


the dependecies wheen you do this meathod 




