its a pointer pointing to what?? 


its a pointer pointing to a double. 
this is very important

its a pointer of double 


remember that memory is stored in a tabular arrangement


*p de-reference 
take the address of d  -->   &d
its some big number that us as humans don't have control over 


lets run the program and take a look.. 

double *p

	make a pointer of type double

p = &d
	assign the numerical value of d's address to the 
	pointer p
	p is a pointer of type double 



the address of d is just a number
like the address of a house is just a numver

but you can use that number as an address which will
lead you to the right place... 

make room for this special addres number.

	double pointer p
and put that number in the special pointer space

normally, p is just chilling, hanging out
	holding the stupid number which is d's address 

but.. we can d-reference p, the pointer
	and use it to get to d

we just use p to get to d 


... so we really don't care about p. 

but if we really cared about p, 

we can grab information aboutj p 

	we can grab the size of p -- 
	we can grab the address of p -- 

but we don't really care.. 

we just use p to point to d.. 

(but i think we can make pointers point to p.. )
	then we might care about p 


*p use the value stored in p as an address 

	*p stop caring about p and use the value 
	at p and grab the value at the address 





we don't care about the physicl address of a piece of data.. 
it's irrelevant to the logic of our program 
and chances are that it changes







it's th value that p is pointing to that gets updated!!! 
	not the value in p itself
	yes p holds a value
	its a number 
	and it has value.. 
	AND WE CAN CHANGE THE VALUE OF p 
	BUT!! we can 
		de-reference p   -- >  *p

		and make changes to d!! 
		
		so do this
		*p += 20

		this does the following: 

			use the value at p as an address
			follow the address to the data at 
				that address in memeory
			update (incrememnt) that value in memeory 



c00ll 



[pointer notes]

[1.]  do not assume that a pointer points anywhere useful until you
	explictly assign it to something

DO NOT ASSUME THE VALUES OF POINTERS


[2.]  also, 

	one pointer an be assigend to another if they are the
		same type
	OR
	one of the pointers is of the type void



*(?)how can a data type be assigend teh value void?? 
	is that different than null/nill(?)*



you can type cast pointers

nothing stops pointers from pointing to an invalid address

c assumes that the programmer knows what he or she is doing

if you break something, it is your resp. to fix/address/prep


{{DANGER}}


dont do this: 

double *p;
p = 1234


you are assigning an actual value to p
	you are not addressing 


you are breaking other peoples stuff
what if this belongs to the OS!!
you might break someone else's system/prgram
you might crash your whole system!!! 

c is low . . . it works directly with hardware and memory 

it assumes you won't do this

but don't assign numerical values to pointers. 


DE-REF the pointers and just use them as pass throught to
	other vairables....




~~~~~~




don't adjust your pointers beyond the boundaries of the array
	`the compiler won't catch it 
	`segmentation fault or core dump
	`the os has decided to kill your program 	
		(because danger)
	`don't de-allocate storage that other pointers still reference
	`there is a heap 
	`there is a call stack
	`heap is a piece of memory that dynamically allows you 
		to allocate and de-allocate memory 
	`heap asks OS and you mess with the heap
	`you use it, then you give it back

	`you only want to play with your own stuff...heap
		you are the owner of the pointers and teh 
		data that you mess around with in program
		so don't mess around with other memory.. 	
		..but there is no mechanism to stop you!! '
		so be careful 
	`use memory and put it back in the pool 
	`for everyone to use when you are done


those are some common mistakes that people make with pointers 
	that are dangerous and break stuff.. 



lets look at 
southeast.c





.....








1. how a compiler works
2. how memory is manipulated


when program is loaded into memory 

	it occupies a number of sections in the memory
	this is where the code resides
	[CODE]when teh code is comp. into binary code, it's read only!!!
	[CONSTANTS]next, there is a special place for constants another 
		read only section of the memory
	[GLOBALS]variables that are decalred outside of methods
	[STACK] 
		there is a main function and some other functions
		void main() {
			p();
		}
		void p() {
			q();
		}
		void q() {}
		
		when you call the main funciton, it is put on the stack
			and the other methods that it calls are put
			on the stack ... 

		------
		  q()    <--pointer "this is the top!"
		------
		  
		------
		  p()    <--

		------
		  main() <--
		------

		there is a pointer that always point to the top 
			of the stack it is more eff. to do it this wway.. 

			so the stuff in the stack is still there..
			it's still part of the stack... 

			the pointer just changes
			the pointer changes the definition of the 
				top of the stack... pretty cool
	



well.. NOW let's look at southeast.c     ......  


"look at the program and tell us what it does"


has two methods
	one that takes two numeric values 
		and increases one 
		and decreases one
	one that takes two pointers
		de-refs them 
		and increases it
		and decreases it


both methods do the same thing, 
	but one does it indirectly by using pointers 
		and dreferencing them to manipulate the 
		data values 





first version(pointer method)
so the values are incremented...
	..BUT pass by value! so the variables on the call stack
		associated with main remain the same 
		because of the call stack activation method
			(i think.. lol) 

		## so pass by value, 
		## call first version in main method, 
		## do method, inc/dec
		## then print out values.. 
		## they are the same!! PASS BY VALUE








second version
		$tack :P
		------
		    
		------
		  
		------  [called with pointer method]
		  go_south_east(pointer to lat,
					pointer to lon) <----pointer
								"..the top"
		------
		 main() <--
		    32
		    -64
		------

BUTTTTTTT.... IF we call the second version of the method... USING POINTERS. .

	it points to the actual values in memory!! NOT the activation record
		yay

let's try it 
		
		pass by value   vs    pass by address/reference
		## call second version in main method
		## use pointers to point to actual values in memory
		## de-ref pointers to inc/dec actual values in memroy
		## print out actual values, 
			which were in/de by pointers.. 
		## and the changes went through!! 
			pass by address! 






~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~



int a[3] = {-1, 2, 3}


[ -1 |  2  |  0  ]

	"a is the name of this array" -- no more.. better way to describe


		.. actually, a is a POINTER 
			[pointer constant]
		which contains teh address of the first 
		integer in this array of numbers



a is a pointer constant, you can't change it

dirty little secret: 

		when the program is compiled, the a goes away!
		IN MACHINE CODE, variable names are replaced with their
			memory addresses




the lements in an array are MUTABLE
		a[1] = 8

BUT the pointer to the array is IMMUTABLE
		!!!no!!! &a = &b






~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~




%^&&^%$%^&^%%^&   don't forget about the right-associative precedence
			with addresses and ... other operators..




~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~




some important remarks

		what does size of c give us?? 
			[c is a pointer to the array pointer a]
		**sizeof(c) gives us the footprint of c itself
			the size of the POINTER of c, 
			c's vanity,  it still exits
		



~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~



what is pointer decay?? 

			let's talk about it 


the size of data pieces and strucures changes.. it's dynamic

	as the size of a changes... we lose track of the size, 
		some important information is lost along the way.. 




-----> if we make a pointer c which is a pointer to the a pointer to 
		an arrray... 

we immediately lose the size of the array!! because 
		sizeof(a) is size of array
		sizeof(c) is size of POINTER!!!

>>>>>>>this is pointer decay. 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~




lay out a forloop to look through old elements in an array.. 

	see lines 22-32 in pointersandarrays.c


caution-- don't try to use the size of the pointer to do the 
		number of elemnts in array trick. see below: 

sizeof(c)/sizeof(*c)

the problem is sizeof(c) -- we don't care about the size of the pointer .. 
it makes the wrong number of iterations.. for tthe loop.. 




pointer artihmatic.]





*(c+1)


follow arow to address at c
get size of it (sizeof)
advance c by four (move it up four bytes in memroy which just happens to be the next data type....)
then dereference it and do calc on data value


this is how we itterate over pointer arrays

c + 1    ---> yeah but what is one? 
		one is one unit of the size of the data type of c.. 

		.. SO .. 
		get the size of the data type which c points to 
		now we know how big one is 
		so MOVE UP c by 'one' in memory.. 
		which advances the c pointer to the next elemnent in teh 
			array [points not to 0 index.. 
					but to the next index.. 
					plus 'one']























~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~





**PS, don't forget to declare methods at the top of the code**






