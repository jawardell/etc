I can compile the cards.c file like so -- 
gcc cards.c

I can send compile the cards.c file into an executable like so -- 
gcc cards.c -o cards

I can compile into an exectuable then execute like so --
gcc cards.c -o cards && ./cards
	.. which executes only if the cards.c file compiles successfully


~~~

don't forget, to turn on line numbers in vi, try the following: 

turn on -- 
:set nu or :set number
turn off -- 
:set nonu or :set nonumber
also can try :set nu!
	(if you are angry)!
~~~~~~~

to change color scheme, do the following: 

make a .vimrc file
add these lines

syntax on
colorscheme desert
:wq

that's it. 
put in home directory. (i guess)

btw -- 

vi is a text editor from the early days of UNIX
vim, or, vi improved, is an improved verison of vi
 :D

~~~~~~~~~~

"Why do I have to prefix the program with ./ when I run it on Linux and the Mac?"

On Unix-style operating systems, programs are run only if you specify the directory where they live or if their directory is listed in the PATH environment variable.


~~~~~~~~~~

C doesn't see strings out of the box. 

It has to read in the characters into an array for processing. 

So, an array of charcters is a String, right? 

Yes. 

Another useful vim command: 

move to end of page and start typing: G$a
move to end of page but don't type: G$
move to end of word: ee
move to end of line: $
move to beginning of line: 0

You want a string in C? Make an array of characters. 

C is so small. You have to import basic functionalities as you want to use them. 
Even when you want to print out to the console, you have to #include <stdio.h>. 
This is why C is so good, it's so small and so fast. 
We need to compile languages quickly and no one wants to do that in Java or Python. 
The langs are just too big and would take too long. 

How can we share our thoughts and ideas with a computer? With an inanimate object? 
We have to learn how to speak to them using electicity and magnets. 



~~~~~~~~~

Since C is a low level language, farther away from human language, it doesn't know how
long a string (character array) is exactly. 

C uses the \0 character as a sentinel character. When C sees this, it knows that it has reached the end of the array of characters [string].

\0 is the character with ACSII value zero.

SO::: when you make a string, a char array for the letters in the string, you MUST make room for the sentinel character which will
be placed at the end of the array to denote the end of the array. 

my intuition -- C places the \0 at the end of the array automatically when reading input from the console
you, however, should account for the \0 when you are creating a string char array. 
	and if you dont, C will not know where the end of the string is. 

It seems that the reason indexing begins at 0 is so the computer can calculate DISTANCE among elements. 
The computer cares about distance because this would help it be able to see where in memory another 
	element is in comparison to another one.
The computer stores elements in consective spaces in memory. 



Ok, so usually, we will define strings as string literals, like so "example". 
But, remember that C doesn't see strings out of the box and also 
	strings really are just character arrays with the sentinel value at the end. 

STRING LITERALS ARE CONSTANT: 
	we can change the elements in an array of characters, but we can't change the
	letters in a string literal. 
	like in Java, when we make a string, then we perform string concatenation, += . 
	The old string looses it's reference, or pointer, is picked up as garbage, 
	then the new string is being pointed to and remains in memory. 

	So I am gussing that the same thing has to happen in C, but C is naive to 
	implicit memory management. 
	If we want to "change a string literal", we have to destroy the old one
	and make a brand new one, which is actually not changing the original string
	at all. . . .

Don't make too many comparisons to Java, those were just my intuitions from what i've read
	so far.. C stores data differently. 



IN C, boolean values are numbers. 
	True is 0 
	False is !0

so you could do this in C if you wanted: 

int people_moshing = 34;           //make a space in memory for an integer data type, assign the value 34 to the variable people_moshing
if(people_moshing)                 //is people_moshing true? is people_moshing == 0? 
	take_off_glasses();        //if people_moshing == 0, then execute the function take_off_glasses(), a function which takes no arguments

this is a great way to check if a number is not zero

if(value is zero) 
	do this

if(!value is zero) 
	do this










~~~~~~~~~~~~~~~~~~~

last class, we learned how to check the contents of a tarball using tar -tvf filename.tar
we also learned how to decompress the contents of a tarball using tar -xvf filename.tar
also you can alias your ll 
we also compiled one of our example code files, rocks.c
we did it like so:     gcc rocks.c -o rocks
this compiles the file into an executable 





what is a system headerfile   ---- things that you import to use like        #include <stdio.h>    or      #include<limits.h>
we will be including our ouwn header files

C IS SMALL


we don't use methods in C, we use functions, (C is a procedural language)

there is formatting in C, like printf etc...



when you compile the file without specifying the naem of the executable then it compiles to a default a.out file which is what you run


my terminal doesn't know how to execute compiled files because 

memory manipulation and how compilers work 



so how does the c compiler work? 


some languages are interpreted like Ruby, php, python, perl, etc.. 
.... but C is compiled. 


gcc send the file to the compiler and there are three steps
	PRE-PROCESSING -- the compiler looks at the whole source code file
		looks at whole source code file one line at time, then executes after that
		sees headerfiles, locates them, and puts them into the source code!
	INTERMEDIATE FILE
	COMPILING -- takes the output from intermediate file and chekcs for syntax errors
		if everything is OK ~ generate object file .o file
	LINKER FILE -- this is what takes the object file to the final executable file
	EXECUTABLE FILE -- the file which contains machine code which you run

	so there are three phases: 
	Pre-Processing
	Compiling
	Sending to Outfile



so let's say we want to skip the last linking step, there are garbage files like .o and a.out
well, we can skip the last step by doing    gcc -c rocks.c
this will give us the rocks.o object file which is the file that would be sent to the linker file, but was not because we did   -c




for every file that we have in the system that we are doing, we will need to compile and process each file, each headder file. 
we manage the build of each file that we have in the project
we manage the build -- we have to keep track of the dependency relationship of the files, depend., compile, etc


.....BUT make will help us do this. 
all we have to do is make a make file which will build and process our project files for us. 
...so its basically a script that compiles our files for us.. we will talk about this later. 
















