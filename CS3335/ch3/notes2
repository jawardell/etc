we can pass arguments to our program when we run it 
we do that by compiling the program 
then running it with the arguments beside it

those arguments are placed into an array called 
	argv

they are in the form of a string


.. 

checks if the number of arguments is 6 

if not, we are not supplying the right number of 
	arguments
	might be too little 
	might be too much




need to give five arguments comming from input from
	command line 



in program, 
	then you pass the test of right number of 
	arguments 
	and move on 


the file might not be openable.. 

	it might just be readabel



it is risky to assume that the IO operations 			will always succeeedd.. 

	we must be able to handle those 


we need to test to see if the file is mutablne or ont
	we need to test to see if the io operation
	succeeded or not 


args explained 

number one is the first filter 






we use file linkers in source code to talk to 
	the actual files on the compute r



scanf waits for the input from console, 



fscanf reads from in
	in is a file linker of your choice.. 


if the fscanf is good, 
	we use strstr 
		is the second argument a 
		SUBSET	
		of the first argument 








fscanf --- read from an input file




sends this entire line to file1



the file handler 
which is associated with the file in memory 










we can do things to be selective about how we read in 


data from files ;



what ever we type right there will all be going ot 
	argv

that array of strings


the number of them goes to argc




DONT FORGET that the call of the program itself 

	GOES INTO ARGV and is accounted for in m
	ARGC





*****we were talking about v2 spooky



amybe we want ot follow the program call with some 
	flags or options


we can do that.. 




we do this by thinking about the contents of argv


how to handle the optional fields, 

this is the case don't ask why

this is the paradigm





this is what we do: 




we use the get opt built in functionm
getopt(argc, argv, "d:t")

if there is an option that is followed by a string
	with detailed information 
	put a colon after it

d:t 


t is not followed by a colon 


-t 

there is nothing after it 




if there is -t 

that meaans the customer want the pizza to be thick 


sooo ... 


it seesm taht optarg return the charachter after the -




two of those will adjust two of those vales so that you
	can handle other arguments if any 




other arguments 
	they all begin with a dash 


after we have processed those optional arguments 
	we want to continue with the other s



we want to handle those and do whatever we can with them 



argc ==> 3 
argv ==> [  "x"

	    "y"

	    "z"
         ]



this is similar to the code that we just added to
category_v2.c





we undersstand how the mechanism works, now lets do 
somehting with it 



test to see if this can recongnize and handle 
	trash arguments 



so what we can see is that the program can handle 
	flags using the paradigm
	and that we can handle the trahs args


	-t and no furhter info 

	d:t
		

	or -d folowed by additional information
	'd'
		delivery = optarg 
		multiple args, 	
		strings, 
		more flags. 
		etc
	't'
		deli`very = thick
		here we know there is only
		one argument (flag?)






talking about assignemnt 6 



there is a minor difference between the uniq command 
	on mac and linux... 


so we need to use linux the whole time!! 
	so can use redhat or office machine. 


there are three programs 

this one is pretty involved. 


need to start tonight 
will take a very long time 

	today is the third 
	the fifth he will be traveling**no class 
	the tenth, will be the fall break **no class
	the twelth ITS DUE**class on thurs


another announcement   ==> a TEST

	we will be having two tests 

	TEST 1
		whole class time 
		will cover ch0 to ch3
		open notes and code

		NO COMPUTER





but lets keep talking about a6



...



UNIX lots of well designed tools we can use 

	cut 
	sort 
	uniq


lets use them to manipulate txt/binary files
(are same in unix, not same in windows)

lots of emp information 
we have the names 
we have the titles 
we have names
departments, dates, some numbers 


we can use cut to extract any particular column 
	and play with the information afterwards

we can man the commands to learn more 


man cut 


cut -d !       vs      cut -d!

	can we do it? -d! delimeter is ! 

using cut.. . 


cut -d! -f3 emp.list

that is the command that is exactly the same 
	as cut from this file 
	lets use ! as delimeter
	and i am interested in the third column 



the titles are the ones that we want to extract 

	is a space allowed? ---> yes 



cut -d ! -f2 emp.lst

cutj -d *  -f2 emp.lst

	WOAH!! this means wildcard

will replace * with $ to fix that 



cut -d $ -f2 emp.lst

don't choose * as a delimeter 


cut -d $ -f3 emp.lst



well this would be easier 





cut and pipe so it takes it as input 
	wait no we want to pipe to sort 
cut -d $ -f3 emp.lst | sort 


cut -d $ -f6 emp.lst



how does it sort?? 	

	it sorts it alphabetically by default!! 

	how is it supposed to know if those 
	values are numbers or not?? 

that's not wht i want.. 


how to i tell sort to sort using numberial values// 

	we use a flag -n

cut -d $ -f6 emp.lst | sot -n


cut -d $ -f3  emp.lst | sort




cut -d $ -f3  emp.lst | sort | uniq


we only want uniq tiitles...
but wait uniq has options too!!


cut -d $ -f3  emp.lst | sort | uniq -c -d

only show tiitles that show up once 
on;y print duplicate lines 
also show number of occurenteces


cut -d $ -f3  emp.lst | sort | uniq -c -u
only print the titles that show up once 


the combination of the two will be original 


cut -d $ -f3  emp.lst | sort | uniq -d -u

	on linux this refuses, the two flags are 
	contradiciting eachother 

BUT try it on Mac.....!!!!!! it's not the same there 
	prob not the same in other ways too.. 



so let's cut and send it to sort and send it to uniq

	on mac 
	and request only duplicates -d
	and request only non-duplicates -u

and for some reason it works.. 
	it does something

                 hi! O.K.






that's the job of cut, the job or sort, and what
	uniq does



now lets become comfortable with the three
	comands by manning them 
	playing with them etc..




lets get to the core.. 



	implement cut in a file called my cut 
	i want you to relax because 
	you grab all of those options from command line
	and send it to the system cut function 




he gives us a skeleton code for mycut 



problematic 



we want to keep line 9 and get rid of after "cut ..""

that whole string will be taking advantage of the system
	function of cut 

we ill have to use the argv and argc to prucess the inputs 
	and stuff. 
	

think about the examples that we did in class today

he says those will be very useful


	mycut -d! -f3 emp.lst


ok if you can pull this off, ,,the second one follows


i want you to work on sort.. 
at the very end, 


	vi mysort


	line 9 : system("sort")

	  grab args contact with sort, space, 
		whole string sent to system
	





ok the last one is really hard 

not allowed to use system function




which sucks



uniqe is very powerful 

has many options

lets see if we can handle three options to begin with j

we have to implement at least three of them 

how do we do this 




HINTZZZZ*********~~~~~~~III yassss 
woot woot woot woo woo woow oo woo wowowooerwerjwe
let gpooooooooo



myuniq.c

think about it 


wen you progam starts, there is a main fncion, 

d	we can couple it with other functions as we want
	we want to grab other argumentes as needed 
	we can also have nothing. 
	myuniq   filename.txt

	make sure that we amke no flag the default;
		another way he will test is 

	mycut...|mysort|myuniq
		need to be ready for pipe to other functions!!!!!! 


		mycut...|mysort|myuniq  -d -c

	should be ready for flags and pipes

	should be ready for redirecting output and
	looking at input from other file 


	main function that ha sections
	firstsection    ****processing 
		while loop that gets input   ===> look at orderpizza.c
		argc -= optidn;
		argf += optind; //optional indicator


		order pizza 
	

		also can have -u
		adjust how flags are proccessed depending on what is passed in
	

	second section	******argc branch-out

		2 cases: waht is the value of argc after processing flgas?????
			argc 1 --- get input from file afte flags
			argc 0 --- get input from command output from pipe
		there are two cases 
			1 the name of the input file is not there 
				there must be a file handler that is used to point to the
				command line
				there are teo posible values for argc 0 or 1  
					0 proceesed flags and nothing left
					1 processed flags adn there is a flag 
				
			2 it is comming from prev command thanks to pipe
	

	third section


		if    stdin

		there are two stings
			there are teo titles 
			compare them are they same 
			if same, move on 
				to deal with second and third
				have counter to deal with number of occuences
				staying on first one until we see boarder between same and not same
			if not same, 
				boarder is broken
				we have number of occurences of a
				the output must say four a
				new title ---> time to summarize the previous

			
	
	


















~ ~ ~ ~ ~ "~ ~ ~ ~ ~ ~ ~




	


`












