Top Five advice i would give to my brother, timmy, who is going to take 1010/1301/1302


1. Make sure you pay attention: grasp these concepts!
	the concepts you learn in the intro classes in CS, 
	as well as in any other knowledge realm, are crucial 
	to your understanding of more advanced topics. you must
	seek to fill in your gaps in knowledge and avoid getting
	them. knowledge gaps will come back to haunt you -- 
	i know from personal experience. you will either suffer in 
	performance due to knowledge gaps OR have to learn them at
	a later time.

2. Practice a lot! 
	The study-credit hour rule is lecutured to us all. Always! 
	But why -- because it works! Try it out. Rigourous practice 
	will make you familiar with how questions are asked, the 
	general nature of solving a problem, and will give  you confidence
	in course work performance. 

3. Assemble a study group
	Some of your best ideas will come from brainstorming with really smart people.
	Some of the coolest ideas that you develop will be because of your contribution 
	along side other people's ideas. If you have the wrong idea about a concept or a 
	solution, team mates can check you and prevent you from going down the wrong path. 
	Groups are good because you can talk about your code together and branch off of 
	eachother's ideas. For each team member, the nerdiness increases and you don't have
	to be a nerd on your own. Spread the geek knowledge!!
		group ideas
		validity checks
		talking through code
	Don't pick a bad group that distracts you, cheats off of you, doesn't include you, 
	 or devolves you in various ways... You will be able to tell if you have a bad group. 
	Group work is important in CS, but we are not always good at it.. it's hard to work
	on a coding project with others... you just want to write all the code your way, 
	debug everything yourself, make and meet your own deadlines, and handle all the 
	business by your self... that's what you usually do any way, right? 

	Groups are ESSENTIAL though because part of the underlying nature of CS and software
	engineering is the business culture of our economy. You will learn how to be more business
	like as you progress. Also, working with groups exposes you to differences in how people
	approach and solve problems -- this is facinating and illuminating on the subject of human thought.
	Group work will help prime your brain for solving one problem in multiple ways, a skill 
	which is rare and valuable.


4. Experiement and break stuff
	Groups are great for a number of reasons. But.. you need to be able 
	to get by yourself and hone in -- focus -- perform deep work. Put in 
	the hours of study and reading time that you need to understand the concepts. 
	Look at elegantly written open source code online, do things on your own, 
	learn new technologies, and master skills that set you apart from your peers. 
	Become obsessed with computer science --> make it what you think and dream about. 
	
	I've shared this with a few people: this is the best advice I have had so far and 
	I think it fits in this category: Don't be scare to break anything. 

	Fear -- it stems from our lack of knowledge. IF something breaks, you are forced to 
	fix it (you'll learn a lot from fixing the things you break). If something breaks, 
	that means it's vulnerable and you should try to improve it if you can.

	Ask yourself -- am i scared to scrap this code and start all over? could 
		i write this code over from scratch if i had to? do i even know 
		what this code is doing?
	** Are you scared to delete the skeleten code provided by the professor? 
		don't take these things for granted. you will be writng these things
		on your own very soon. know what the code does. ask questions.

5. Have fun!
	Make sure that you have fun while doing computer science. It's competitive, and 
	competition is fun. You will 
	learn to like and appriciate the 
	competitive nature of it. There are so many fun things that you can do with cs
	and you should try to do them all.
	What do i mean by that: 
	there are infinitely many things you can do with computer science. 
	computers are the most powerful thing we have as humans. 
		you are learning how to talk to and understand computers. 
	your oppoortunies are endless, so do cool stuff now, asap!! 
	at first when you start learning something, you suck at it. you're not good at it, 
	but you want to be better. then you get semi ok at it, but you're still not good. 
	at the semi ok level, you have an enjoyment for doing it and this makes you want 
	to improve the skill...
	so you start rigorously practicing the skill, but then it's not as fun as it used
	to be when you were semi-ok and coasting... 
		BUT -- if you tough it out and practice even when its not fun, your 
		understanding and mastery will increase and you will like it more 
		than when you began! 
	Getting better is not always fun and easy, but the little improvements in skill along
	the way are really worth it and make you feel really happy and you enjoy the technical 
	work more than you used to.
	 Also, there are lots of cool things to do 
	that are not in cs and you should also do those (prioritize these things accordingly).

	For example -- go out side, go camping or kayaking. being outside helps your brain 
	and even helps you solve problems better. get your work done early and pay attention in class
	this will allow you to have more time to have fun when you are done with work.
	Use your time very wisely.


don't accumulate knowledge gaps
fill in knowledge gaps now
experiment and break things
don't be scared to break things
know what the code does 
talk through your code outloud
write down your thoughts, code, and design
get used to the syntax - learn by doing
study with a good group
ask questions
go to tutoring when you need it


How did i manage time in 1010, 1301, 1302
	1010 -- i was pretty much on coast for this class, but i paid attention during lectures
		and was actively participating during the lecture. I used Quizlet to learn 
		the new vocab terms. 
	1301 -- i was still on coast in this class, but this caused my performance to be average. 
		i glanced at practice problems in the book and did the homework. i really didn't
		study enough for this class
	1302 -- over the summer, the prof. sent out scary emails so i started studying and practicing 
		my skills. i read throgh the chapaters we covered in 1301 and forced myself to write code.
		i didn't really like to write code at first when i didn't really have a good solution, but during 
		that summer, i got better and started to like it more. i learned how to use the IDEs and 
		it's features, too. because i was scared 
			during the class, i studied every chance that i got. i split my studying into three 
		categories -- terminology, theory, and syntax/semantics practice. i would learn the vocab, 
		read teh book, and force myself to code. i kept a log a questions to ask during class 
		and the professor's inbox was spammed with my email questions (sorry professor). I also 
		worked on some side interests that weren't covered in the class and these made my love for 
		CS increase. 

	1010 -- coasted: freshman-goofoff, vocab terms, active in class (and labs) -- performance ~ Good
	1301 -- coasted: mediorcre study habits, did homework -- performance ~ Mediocre
	1302 -- strived: studied every waking moment not in class, forced self to code, did extras ~ Great



What were some of the challenges in 1010, 1301, and 1302? 
	1010 --
		SYNTAX!!!!!!
			learned by doing
			learned more about how code works
		off by one everything ... why tho?(still happening today)
			learned more about why tho -- indexing and memory 
		problem statements were hard
			had to pause and ponder

	1301 -- 
		loops :(
			learned by doing
			wrote out iterations on WB or paper
		quizzes (more for loops)
			blamed others -- leanred to blame self
			tried to do better on quizzes
		sytax -- methods, formatting, what is public static void main(String[] args) {} ?? , modifiers
			learned by doingi
			learned from reading


	1302 -- 
		recursion (still suck at it)
			pracitced
			brain stormed on paper
			talked it out with friends
			wrote code on paper
			read book to understand the stack
		numeric operations (mod, \, data types, bits and bytes, bit twidling)
			learned by doing 
			did math on paper 
			took out batteries in calcluator
			did khan academy
			got excited about boring math 	
				from 3blue1brown and numberphile
		GUI
			forced self to hand write gui code
			i just hated java gui and still hate it
			its just so ugly and the code is stupid..
			but.. i digresss
			it's good to learn event handling and lamda expressions
				and inner anonumously declared classes



	
Did i study in a group? If so how did it help? 
	1010 -- did study in a group a little, it did help me a lot, 
		a friend introduced me to quizlet and this made me 
		understand the importance of learning vocab
	1301 -- didn't study in group, did however do hackathon
	group event and this opened my eyes a lot and made me better
	1301 -- YES studied in gropus often with great people and 
	learned so much!! had much better understanding and leanrned 
	that every problem has multiple solutions



What other resources other than the text book did  you use? 

	coding bat
		great way to learn basics
		great way to remain fresh on basics
	quizlet
		essential for learning vocab
	algorithms/ds app
		great way to learn on the go (waiting in line, etc)
	youtube (barely)
		for certain topics
		helped me learn " this " 
		don't use as excuse not do code
		learn by doing is best
	IDE tools
		info and auto complete
		debuggers are great, use them
		jgrasp debugger is awesome
		eclipse debugging is great
	API info online
		tells you what tools you have to use
		helps with syntax



cope with fact that learning new things.. 
	i never really felt uncomfortable learning 
	i LIKE learning. a lot. and class was always really fun to me
	but
	some concepts didn't make sense to me when i first heard them..
	...this was a little scary, but i allowed myself time to think about it
	..pause and ponder on the concepts... 
	didn't forget about them, just let them soak in my mind for a while.. 
	then i would look up stuff about them online
	and would read the book
	and think about the right questions to ask.. 
	Eventually after some practice (this is an important step)
		i was able to have an understanding of the concept.
	







How did you prepare for tests? 
	1010 -- 
		looked at powerpoints
		looked at lab and hw code 
		leanred vocab
	1301 -- 
		wrote some code
		did homework
		looked at powerpoints
		learned vocab
	1302 -- 
		rigorously wrote code for hours
			on paper and then tested in IDE
		read book for hours
		read notes and did practice problems from notes
		studied with group for hours
		went to tutoring (important step, highly recommend)




How do you go about studying an example problem. 

Very good question. Some of the problems out there are hard. 
When i know that there is a hard problem that i am going to STUDY, 
i make sure that I know where the correct answer is.  
I look at the problem statement and really try to understand what its asking
	do some examples 
	do some pattern matching
	think about my toolbox
do a lot of work on paper. 
devise my plan to solve the problem and write it down
	english solution
then encorporate significant code statements in my english solution
	psudocode
run through my algorithm again to make sure it holds true logically
start typing CODE!! :)
try building code (fail, jk) fix any syntax errors
RUN THE CODE! :)
	get dissapointed when its wrong
	awe.. 
fix logical errors, semantic errors
rebuild and run
YAY, might get right answer there.. 
	or might be completely stumped when it 
	fails one or two test cases!!!! >:{


when the code fails, i must acknowledge that i have a problem , 

	there is no use in being in denile here. 
i check back over the code and restate the algorithm, speicific failed test cases are 
	useful here. 

i make adjustments based on cracks in my logic or cracks in things going on under the hood..
	and my misunderstanding of them.. 

i rebuild and run.. 

so this process repeats
	restate question
	algorithm runthrough
	validity check
	pass in tests that fail
	build
	run 





when i'm done with the solution, it might be like the hulk of brute force naieve solutions. 
	but at least it works. I then check the ideal or opposing solution that is known for the 
	problem and compare it to mine. 
	What did it do that was different than mine? 
	How does this change the way that I was seeing the problem?
	Does this illuminate an aspect of the problem that I wasn't aware of before? 


i'll admit, i don't do this as much as i would like to, but i know that if i did 
my skills would start to improve a lot. 

























